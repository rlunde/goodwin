It looks like it might be fun to try out electron (http://electron.atom.io) for
building HTML/CSS/JS apps that run as desktop apps and use Node.js. I'd like
the client side to be as interactive as a desktop app, but portable, and 
transparent so the developers who eventually use it can verify that nobody
has snuck evil stuff into it.

The quick start tutorial is:
http://electron.atom.io/docs/latest/tutorial/quick-start/
The quick start demo is:

# Clone the Quick Start repository
$ git clone https://github.com/atom/electron-quick-start

# Go into the repository
$ cd electron-quick-start

# Install the dependencies and run
$ npm install && npm start

I tried installing electron-prebuilt globally via this:
$ npm install --global electron-prebuilt

But then when I tried to run it I got this error:
$ electron .
dyld: Library not loaded: /usr/local/lib/libffmpeg.dylib
  Referenced from: /usr/local/lib/node_modules/electron-prebuilt/dist/Electron.app/Contents/Frameworks/Electron Framework.framework/Versions/A/Electron Framework
    Reason: image not found

I'm trying over with a local node_modules install like that above, and a modified copy of the package.json.

I ended up installing bootstrap and jquery locally too.
To install those yourself:
  cd ./app
  npm install jquery
  npm install bootstrap

I think the next thing to do with this project is to pick something tiny and fun
to do a code generation snippet for. Prompt the user, and say "sorry, so far all
I know how to do is make fun CSS animations for existing HTML or SVG elements".
Then learn how to parse input, have a Q&A session with the user, etc.

I think the most important thing to get going right from the start, and keep
working on, is a wise-ass attitude like Archie Goodwin has in the Nero Wolfe
books. Not everyone will enjoy that, of course, but it's a way to make something
unique and interesting right away, rather than just another code generator app.

I think I should position the input panel at the bottom, and intermix messages
from the user and from Goodwin as if they were in Slack or something above that.

I think I'll try taking a look at the web apps for slack, hipchat, etc. (or try
to find something simpler) and see how they mix input and output in a "chat" 
stream.

Or maybe there's a tutorial for a chat client that does that?

After poking around for a while, I found a list of chat templates for bootstrap,
here: http://www.designrazor.net/best-free-bootstrap-chat-templates/

I guess I should be better about splitting up the notes about the whole project
into this file, and things specific to the client or the server under their
own directories in devlog.me or notes.

Actually, in addition to helping people figure out how to use git (by having
a conversation -- which could just be Q&A at first) I'll bet there are a handful
of other things that people only do once in a while that they don't want to
spend hours (or days, or weeks) learning or re-learning in order to do something.

I'll bet a few hours poring over common topics for questions in stackoverflow
would give me some ideas for simple things.

A lot of the time, I suspect it's just a matter of terminology, rather than
anything else. If you know roughly what you want to do, but you don't know
what it's called, you can't even Google it effectively.

Also, just being able to ask questions (like a wizard interface might do) and
then *explain* the options, might be a huge help. (I still remember some of
the original Linux installation questions, which asked users to make decisions
on how to partition disks when they had no idea what they needed or what the
tradeoffs were, and didn't want to know).

Another possible use of Goodwin might be just helping people ask questions in
a way that is most likely to solicit a useful answer on stackoverflow or other
sites. Many questions are too vague or are so poorly written that they're
unlikely to interest the right people.

See server/notes for my initial decision about how to split things between
client and server. In a nutshell:

Client:
  * written in node/javascript, run using electron
    * provides native-ish UI while using web technologies
  * full access to local files and directories, and ability to run external programs
  * run it inside a VM to prevent security problems
  * main job is to interact with the user and the user's computer

Server:
  * a collection of microservice
  * able to download code and remotely execute on client (which is inside a VM)
  * should be continuously deployed/updated
  * knows about user and history across and inside sessions

Start with code generation/re-generation for D3, because D3 is super cool,
but a lot of it isn't very intuitive (e.g. select for things that don't exist
yet).

I registered the domain gend3.com for that, and pointed it at a ubuntu server
in the cloud. I want to read/write a JSON representation of a sample D3
app from goodwin, and have the server be able to generate a sample web site
(with html, css, and js) from that, to download as a tarball.

