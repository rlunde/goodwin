
I tried to think of a good sidekick from literature or film that
reminded me of what I wanted for this, and came up with Archie
Goodwin, Nero Wolfe's sidekick. In the Nero Wolfe books by Rex
Stout, Archie Goodwin is a wise-cracking assistant who does a lot
of things, but who needs the brilliant (yet stay-at-home) detective
to actually figure things out. In this respect the users of this
app play the role of Nero.

The basic idea is to make a code generator, simplifier, improver,
that has a conversation with you, and can read/parse code and
generate or regenerate bits of it. Rather than a typical code
generator, which is done once at the beginning of the project, by
filling out a form (or equivalent), this would ask questions, and
get more specifics and the models, APIs, etc., before generating
the first code, and would leave markers in the code (as comments)
to guide later parsing and automated changes.

To Do Next:

[ ] think through an initial design
[ ] make the simplest possible thing just to get started
[ ] try to make it fun, and funny -- make it a wiseass like Archie Goodwin in the books
[ ] make a list of all the most popular code generators (e.g. in Rails), and see how
    they work. Look for things that can parse and ge-generate portions of code.
[ ] decide on an architecture -- I think I could get hung up worrying about deployment issues,
    but since (initially at least) this is for developers, the client piece should be transparent,
    and anything destructive should be very carefully done and verified.
[ ] I'm thinking of a client/server architecture, with the server written for speed, simplicity,
    and efficiency, and the client written for simplicity and transparency.

In addition to code generation, there's just helping figure out how to
use tools. Git is a great place to start. There are a whole lot of options
to git and different ways of using it, and most of the confusion could
probably be cleared up by asking a few questions.

Writing code or explaining code probably falls into the same category. A user
may want to know what a closure is, and when to use one, or may want syntax
help just making an anonymous function, or may want a confusing bit of code
explained.

I think the first thing will be a handful:
a) make a json format to describe a project to be code generated
b) make a code generator
c) make the code generator take the json format
d) make an interactive bot that helps build up the json file

Of course, later on, it should be a lot more feature rich, but that
seems like a good short term strategy.

Lately I've tried using a fair number of javascript code generators, and while
some of them do a really great job of generating a project that covers all the
bases, to a great degree they're all examples of what I consider the absolute
worst approach to software development: start with a framework that includes
(literally) *megabytes of source code* and then have a "build" step to generate
a light-enough version for browsers to use, but have the "built" stuff be
incomprehensible and (realistically) uneditable.

Meanwhile, the tutorial sites for react, angular, etc. all want to show you how
a few JS includes from a CDN will pull in their framework/libraries, and then
you can make your "hello world" example in a handful of lines.

I want to have a code generator that goes beyond hello world, but stays with
something that will actually run in a browser but it editable by hand. I want
an assistant, that can help re-generate portions of code, or refactor code, or
explain code, not a thing that just poops out something that's too big to 
understand in a dev environment that makes stuff that's too munged up to
understand in the browser.

So what's the first step towards that?

a) begin with the end in mind -- write up more about how I want this to work
b) make a command-line chat interface that collects info needed to make a *simple* project

