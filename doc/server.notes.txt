A Djinn In A Box?

I've been struggling to figure out what to put on the client side, and what to put
on the server side. Something that generates code that other tools and editors
need to interact with seems like it should be on the client. The problem is, I
want it to get smarter day by day, and we can't very well have the whole base
syncing to the client side all the time, at least if we eventually have a whole
lot of data used by/for deep learning. Also, that much syncing and nobody is going
to know for sure what's being synced.

The problem with a client that can interact with local files but that gets its
orders from a server is that security becomes a nightmare even more quickly.

I've tried to think of a good way to provide the functionality without the risk,
but it's really complicated. 

I think the best thing to do at first (at least) is just put everthing in docker
images, and run the client locally inside docker with a volume mounted for generated
code or code you're working on. Even then, it's likely that we'll want to load
stuff into files inside the docker container while working on it, and only write
them out when ready to copy them elsewhere.

How To Build The Server

All that said, the question becomes what to choose for the server side. I think
even if it becomes a web tier and an application tier before it's done (as it
should) the ultimate goal should be performance and scalability on both of
those, so I think I'll try Go for it, rather than something like a web framework
(such as RAILS).

Run "go build" in this directory to build the server. Still to come: all the
dependencies outside of the standard library, etc.

Time to start brainstorming APIs and data structures. I think I'll put a first
guess at some of those in other files.
